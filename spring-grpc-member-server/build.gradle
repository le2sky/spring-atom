buildscript {
    ext {
        protobufVersion = '4.28.2'
        protobufPluginVersion = '0.9.4'
        grpcVersion = '1.68.2'
    }
}

plugins {
    // protobuf 플러그인을 사용하면 .proto 파일을 컴파일할 수 있다.
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

jar {
    enabled false
}

protobuf {
    // 프로토콜 버퍼 컴파일러를 지정하여 .proto 파일을 컴파일한다.
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    // 생성된 파일을 정리한다. 이전 빌드에서 생성된 파일들을 삭제하여 빌드 환경을 깨끗하게 유지하기 위해 사용된다.
    clean {
        delete generatedFilesBaseDir
    }

    //  grpc 플러그인을 설정하여 .proto 파일로부터 gRPC 관련 코드를 생성할 준비를 한다.
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    // 모든 프로토콜 버퍼 작업에 대해 grpc 플러그인을 적용한다.
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // 프로토콜 버퍼 메시지의 직렬화 및 역직렬화를 지원한다. 프로토콜 버퍼는 데이터를 효율적으로 직렬화기 위한 Google 데이터 인터페이스 언어이다.
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // spring boot gRPC 자동 구성
    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'

    /**
     * netty : 비동기 이벤트 기반 네트워크 애플리케이션 프레임워크(높은 성능과 유연성을 제공)
     * grpc-netty-shaded : grpc 서버와 클라이언트의 netty 전송 계층을 제공한다.
     */
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"

    // 프로토콜 퍼버 메시지와 grpc의 통합을 지원한다. 프로토콜 버퍼를 사용하여 gRPC 서비스 정의 파일(proto)을 기반으로 메시지와 서비스를 생성할 수 있다.
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"

    // grpc 클라이언트 스텁을 생성한다. 클라이언트 스텁은 클라이언트가 서버의 grpc 서비스를 호출할 수 있게 하는 간편한 인터페이스를 제공한다.
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
}
